<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>你不知道的Chrome调试工具技巧集合</title>
      <link href="2019/01/28/chrome%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7%E6%8A%80%E5%B7%A7%E9%9B%86%E5%90%88/"/>
      <url>2019/01/28/chrome%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7%E6%8A%80%E5%B7%A7%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h2 id="Console中的’-’"><a href="#Console中的’-’" class="headerlink" title="Console中的’$’"></a>Console中的’$’</h2><ol><li>$0  <blockquote><p>$可以保存5次对于dom节点的选择操作，$0是最近一次选中的节点，$1是上一次选中的dom节点，直到$4</p></blockquote></li></ol><p><img src="https://user-gold-cdn.xitu.io/2018/12/7/16785c75b56d3a80?imageslim" alt="图片1"></p><ol start="2"><li><p><code>$</code>和<code>$$</code></p><blockquote><p>如果<code>$</code>没有被占用的话（比如jquery或者zepto），在<code>console</code>中相当于<code>document.querySelector</code>的别名<br><code>$$</code>则相当于<code>document.querySelectorAll</code>，且返回的是节点数组而非 Node List</p></blockquote></li><li><p><code>$_</code>  </p><blockquote><p><code>$_</code>是对上次执行结果的引用</p></blockquote></li></ol><p><img src="https://user-gold-cdn.xitu.io/2018/12/7/16785d333e7c1d7f?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="图片2"></p><ol start="4"><li><code>$i</code>  <blockquote><p>在<a href="https://chrome.google.com/webstore/detail/console-importer/hgajpakhafplebkdljleajgbpdmplhie/related的帮助下" target="_blank" rel="noopener">Chrome插件: Console Importer</a>，可以款速的在<code>console</code>中引入<code>npm</code>库<br>比如直接<code>$i(&#39;lodash&#39;)</code>或<code>$i(&#39;moment&#39;)</code>几秒钟之后，就可以获取到<code>lodash / moment</code>了<br>（对于有的网站 是有CSP安全策略的，这时候加载外部资料是有限制的，加载不成功的）</p></blockquote></li></ol><p><img src="https://user-gold-cdn.xitu.io/2018/12/7/16785da0dea963fb?imageslim" alt="图片3"></p><h2 id="copy-amp-saving"><a href="#copy-amp-saving" class="headerlink" title="copy &amp; saving"></a>copy &amp; saving</h2><ol start="5"><li><code>copy(...)</code>  <blockquote><p>通过全局方法<code>copy()</code>可以在<code>console</code>中<code>copy</code>一切你能拿到的资源，包含<code>$</code>类引用的变量，例如<code>copy($_)</code>或者<code>copy($0)</code></p></blockquote></li></ol><p><img src="https://user-gold-cdn.xitu.io/2018/12/7/16787442a1444125?imageslim" alt="图片4"></p><ol start="6"><li>Store as global<blockquote><p>当你使用<code>console</code>打印出一堆数据的时候，你希望对这些变量进行一些额外的操作，只需要对这行数据右键单击，选择<code>Store as global variable</code>，就会创建一个<code>tempX</code>的变量，进行后续操作，且不用担心原始数据被重写</p></blockquote></li></ol><p><img src="https://user-gold-cdn.xitu.io/2018/12/7/167874429e8b8f73?imageslim" alt="图片5"></p><h2 id="Console-Methods"><a href="#Console-Methods" class="headerlink" title="Console Methods"></a>Console Methods</h2><ol start="7"><li><code>console.assert</code><blockquote><p>如果断言为false，则将一个错误消息写入控制台。如果断言是true，没有任何反应。</p></blockquote></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.assert(assertion, obj1 [, obj2, ..., objN]);</span><br><span class="line"><span class="built_in">console</span>.assert(assertion, msg [, subst1, ..., substN]); <span class="comment">// c-like message formatting</span></span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2018/12/7/167893640b5cdd71?imageslim" alt="图片6"></p><ol start="8"><li><code>console.table</code><blockquote><p><code>console.table</code>会将一个Array、类Array类型或者Object类型的数据以漂亮的表格形式打印出来</p></blockquote></li></ol><p><img src="https://user-gold-cdn.xitu.io/2018/12/7/167893640e9ba1d3?imageslim" alt="图片7"></p><ol start="9"><li><code>console.dir</code><blockquote><p>当我们希望打印dom节点的时候，使用<code>console.log</code>会有局限性。这时我们可以使用<code>console.dir</code>方法，这个方法可以将dom节点以JavaScript对象的方式在控制台打印出来</p></blockquote></li></ol><p><img src="https://user-gold-cdn.xitu.io/2018/12/7/1678936410bb79fa?imageslim" alt="图片8"></p><h2 id="The-Elements-panel"><a href="#The-Elements-panel" class="headerlink" title="The Elements panel"></a>The Elements panel</h2><ol start="10"><li><code>h</code>快捷键<blockquote><p>可以通过<code>h</code>快捷键来快速隐藏选中的元素</p></blockquote></li></ol><p><img src="https://user-gold-cdn.xitu.io/2018/12/9/1679379780c11ef3?imageslim" alt="图片9"></p><ol start="11"><li>drag &amp; drop elements<blockquote><p>可以通过拖拽dom元素使之放置在相应的节点</p></blockquote></li></ol><p><img src="https://user-gold-cdn.xitu.io/2018/12/9/16793797bde74b62?imageslim" alt="图片10"></p><h2 id="让人疑惑的console-log"><a href="#让人疑惑的console-log" class="headerlink" title="让人疑惑的console.log"></a>让人疑惑的<code>console.log</code></h2><ol start="12"><li><code>console.log</code>有时打印出与预期不符的对象<blockquote><p>在<code>console</code>中打印的对象，在打印之前，都是以引用的形式保存的</p></blockquote></li></ol><p><img src="https://user-gold-cdn.xitu.io/2018/12/11/1679a0d3a708ef3e?imageslim" alt="图片11"></p><h2 id="Command菜单"><a href="#Command菜单" class="headerlink" title="Command菜单"></a>Command菜单</h2><p>// TODO</p><h2 id="异步console的调试技巧"><a href="#异步console的调试技巧" class="headerlink" title="异步console的调试技巧"></a>异步console的调试技巧</h2><ol start="13"><li>使用console异步调试<blockquote><p>越来越多与浏览器有关的API都是 基于<code>Promise</code>的 。当你使用 <code>promise</code> 的时候你通常使用 <code>.then(处理方法)</code> 或者 将它 ( <code>promise</code> ) 包裹在 async 方法中，并且使用 await 来接收它的结果。  </p></blockquote></li></ol><blockquote><p>我们在 <code>JavaScript/TypeScript</code> 中大量使用这些东西，但是在 <code>Console</code> 中书写这样的结构，一点都不方便。</p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2018/12/12/1679e0201c187733?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="图片12"></p><blockquote><p>然后，其实你可以直接这样使用</p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2018/12/12/1679e0201c5c5fd7?imageslim" alt="图片13"></p><h2 id="Color-Picker"><a href="#Color-Picker" class="headerlink" title="Color Picker"></a>Color Picker</h2><ol start="14"><li>Color Picker使用方法  </li></ol><p><img src="https://user-gold-cdn.xitu.io/2018/12/12/167a1d2cc62a8d0f?imageslim" alt="图片14"></p><h2 id="给-console-计时"><a href="#给-console-计时" class="headerlink" title="给 console 计时"></a>给 <code>console</code> 计时</h2><ol start="15"><li>检测执行时间</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.time() <span class="comment">// 开启一个时间器</span></span><br><span class="line"><span class="built_in">console</span>.timeEnd() <span class="comment">// 结束计时并将结果打印出来</span></span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2018/12/13/167a484d3824545d?imageslim" alt="图片15"><br></p><h2 id="样式编辑器"><a href="#样式编辑器" class="headerlink" title="样式编辑器"></a>样式编辑器</h2><ol start="16"><li>插入样式规则的按钮<blockquote><p>当你把鼠标放在样式选择器的选择区域的最后时，你会看到几个按钮，它们可以让你快速的使用 Color 和 Shadow 编辑器添加 CSS 属性。</p></blockquote></li></ol><p><img src="https://user-gold-cdn.xitu.io/2018/12/14/167ac1748b954754?imageslim" alt="图片16"></p><ol start="17"><li>阴影编辑器</li></ol><p><img src="https://user-gold-cdn.xitu.io/2018/12/14/167ac17a4194c870?imageslim" alt="图片17"></p><h2 id="对象-amp-方法"><a href="#对象-amp-方法" class="headerlink" title="对象 &amp; 方法"></a>对象 &amp; 方法</h2><ol start="18"><li><code>queryObjects function</code> 对象查询方法</li></ol><p><img src="https://user-gold-cdn.xitu.io/2018/12/18/167c07a88c45b6bd?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="图片18"></p><blockquote><p>假如我们有这样一段代码，我们在里面定义了一些对象。name在特定的上下文中，有哪些存在的对象呢。</p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2018/12/18/167c07a88ed68f7f?imageslim" alt="图片19"></p><ol start="19"><li>给<code>console.log</code>加上<code>css</code>样式</li></ol><p><img src="https://user-gold-cdn.xitu.io/2018/12/20/167c99ea0788464b?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="图片20"></p><h2 id="断点"><a href="#断点" class="headerlink" title="断点"></a>断点</h2><ol start="20"><li>DOM 断点<blockquote><p>某些脚本会修改 DOM 的一部分，不确定修改的是哪部分，甚至不确定是什么时候修改的。<br>添加一个 DOM 断点。你就可以监听到节点被添加或者移除，或属性被改变。</p></blockquote></li></ol><p><img src="https://user-gold-cdn.xitu.io/2019/1/22/168746caeae2a94e?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="图片21"></p><blockquote><p>当断点添加过多或者子元素断点被父元素折叠的时候，在<code>Element</code>中会被高亮展示</p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2019/1/22/168747517998eb7d?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="图片22"></p><ol start="21"><li>XHR/fetch 断点<blockquote><p>当你想捕获已发送的 <code>ajax</code> 请求中的特定时刻， 可以使用 XHR/fetch breakpoint。<br>这些只能在 Source 面板中设置。（Network 面板中不可以）</p></blockquote></li></ol><p><img src="https://user-gold-cdn.xitu.io/2019/1/22/16874662814db12c?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="图片22"></p><h2 id="The-NinJa-logs"><a href="#The-NinJa-logs" class="headerlink" title="The NinJa logs"></a>The NinJa logs</h2><ol start="22"><li>条件断点<blockquote><p>当有一个循环对 200 个元素的遍历，但你只对第 110 次循环的结果感兴趣，或者只对一些满足其他的特殊条件的结果感兴趣时，就需要一个条件断点。</p></blockquote></li></ol><ul><li>右击行号并且选择 <code>Add conditional breakpoint...</code> 的选项</li><li>或者右击一个已经设置的断点并且选择 <code>Edit breakpoint</code></li><li>然后输入一个执行结果为 <code>true</code> 或者 <code>false</code> 的表达式（其实会有隐式转换的）。</li></ul><p>之后，满足条件，断点就会执行</p><p><img src="https://user-gold-cdn.xitu.io/2018/12/17/167b94b8f36112b7?imageslim" alt="图片22"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker 常用命令</title>
      <link href="2019/01/21/Docker-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>2019/01/21/Docker-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker images          <span class="comment"># 列出所有镜像(images)</span></span><br><span class="line">docker ps              <span class="comment"># 列出正在运行的容器(containers)</span></span><br><span class="line">docker ps -a           <span class="comment"># 列出所有的容器</span></span><br><span class="line">docker pull xxx        <span class="comment"># 下载xxx镜像</span></span><br><span class="line">docker top &lt;container&gt; <span class="comment"># 查看容器内部运行的程序</span></span><br></pre></td></tr></table></figure><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker stop &lt;container&gt;                  <span class="comment"># 停止一个正在运行的容器，&lt;container&gt;可以是容器ID或名称</span></span><br><span class="line">docker start &lt;container&gt;                 <span class="comment"># 启动一个已经停止的容器</span></span><br><span class="line">docker restart &lt;container&gt;               <span class="comment"># 重启容器</span></span><br><span class="line">docker rm &lt;container&gt;                    <span class="comment"># 删除容器</span></span><br><span class="line"></span><br><span class="line">docker run -i -t -p :80 LAMP /bin/bash   <span class="comment"># 运行容器并做http端口转发</span></span><br><span class="line">docker <span class="built_in">exec</span> -it &lt;container&gt; /bin/bash    <span class="comment"># 进入ubuntu类容器的bash</span></span><br><span class="line">docker <span class="built_in">exec</span> -it &lt;container&gt; /bin/sh      <span class="comment"># 进入alpine类容器的sh</span></span><br><span class="line"></span><br><span class="line">docker rm `docker ps -a -q`              <span class="comment"># 删除所有已经停止的容器</span></span><br><span class="line">docker <span class="built_in">kill</span> $(docker ps -a -q)           <span class="comment"># 杀死所有正在运行的容器，$()功能同``</span></span><br></pre></td></tr></table></figure><h2 id="提交-导出"><a href="#提交-导出" class="headerlink" title="提交/导出"></a>提交/导出</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker build --rm=<span class="literal">true</span> -t hjue/lamp .    <span class="comment"># 建立映像文件。–rm 选项是告诉Docker，在构建完成后删除临时的Container，Dockerfile的每一行指令都会创建一个临时的Container，一般这些临时生成的Container是不需要的</span></span><br><span class="line">docker commit xxxxxxxxxxx mynewimage    <span class="comment"># 提交你的变更，并且把容器保存成镜像，命名为mynewimage，xxxxxxxxxxx为容器的ID</span></span><br><span class="line"></span><br><span class="line">docker save mynewimage | bzip2 -9 -c&gt; /home/save.tar.bz2  <span class="comment"># 把 mynewimage 镜像保存成 tar 文件</span></span><br><span class="line">bzip2 -d -c &lt; /home/save.tar.bz2 | docker load            <span class="comment"># 加载 mynewimage 镜像</span></span><br><span class="line"></span><br><span class="line">docker <span class="built_in">export</span> &lt;CONTAINER ID&gt; &gt; /home/export.tar           <span class="comment"># 导出Image</span></span><br><span class="line">cat /home/export.tar | sudo docker import - mynewimage    <span class="comment"># 导入Image镜像</span></span><br></pre></td></tr></table></figure><h2 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -i -t centos /bin/bash          <span class="comment"># 运行centos镜像</span></span><br><span class="line">docker run -d -p 80:80 hjue/centos-lamp    <span class="comment"># 运行centos-lamp镜像</span></span><br><span class="line"></span><br><span class="line">docker rmi [image-id]                      <span class="comment"># 删除镜像</span></span><br><span class="line">docker rmi $(docker images -q)             <span class="comment"># 删除所有镜像</span></span><br><span class="line">docker rmi $(sudo docker images --filter <span class="string">"dangling=true"</span> -q --no-trunc)  <span class="comment"># 删除无用镜像</span></span><br></pre></td></tr></table></figure><h2 id="帮助"><a href="#帮助" class="headerlink" title="帮助"></a>帮助</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --<span class="built_in">help</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>webpack4从零新建react项目流程及踩坑</title>
      <link href="2018/12/11/webpack4%E4%BB%8E%E9%9B%B6%E6%96%B0%E5%BB%BAreact%E9%A1%B9%E7%9B%AE%E6%B5%81%E7%A8%8B%E5%8F%8A%E9%87%87%E5%9D%91/"/>
      <url>2018/12/11/webpack4%E4%BB%8E%E9%9B%B6%E6%96%B0%E5%BB%BAreact%E9%A1%B9%E7%9B%AE%E6%B5%81%E7%A8%8B%E5%8F%8A%E9%87%87%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<blockquote><p>webpack已经升级到4+版本，无论是create-react-app还是antd-pro要么太重，要么不方便自己对webpack进行配置，因此采用从零开始的方式进行react项目搭建。</p></blockquote><h2 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h2><p>4.0版本之后，webpack的配置有了一些明显的变化<br>首先是安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev webpack</span><br><span class="line">npm install --save-dev webpack-cli</span><br><span class="line">or</span><br><span class="line">npm install --save-dev webpack-command</span><br></pre></td></tr></table></figure></p><p>webpack被拆分到了两个包里，其中使用webpack命令，需要安装<code>webpack-cli</code>或<code>webpack-command</code></p><p>如果是全局安装，那么这样设置<code>package.json</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">&quot;start&quot;: &quot;webpack --mode development&quot;,</span><br><span class="line">&quot;build&quot;: &quot;webpack --mode production&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果是项目内安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">&quot;start&quot;: &quot;node_modules/.bin/webpack --mode development&quot;,</span><br><span class="line">&quot;build&quot;: &quot;node_modules/.bin/webpack --mode production&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><ol><li><p>react及babel相关依赖(babel新的相关包的命名方式已经改为@babel/+name的形式)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i -D @babel/core babel-loader @babel/preset-env @babel/preset-react</span><br><span class="line">npm i -S  react react-dom</span><br></pre></td></tr></table></figure></li><li><p>新建webpack.config.js(webpack4.0的语法与之前差异较大，深坑)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">module: &#123;</span><br><span class="line">rules: [</span><br><span class="line">&#123;</span><br><span class="line">test: /\.jsx?$/,</span><br><span class="line">exclude: /node_modules/,</span><br><span class="line">use: [</span><br><span class="line">&#123;</span><br><span class="line">loader: &apos;babel-loader&apos;,</span><br><span class="line">options: &#123;</span><br><span class="line">presets:[&apos;@babel/preset-env&apos;, &apos;@babel/preset-react&apos;]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>index.js基础格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import React from &apos;react&apos;;</span><br><span class="line">import ReactDOM from &apos;react-dom&apos;;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">    &lt;div&gt;Hello world&lt;/div&gt;,</span><br><span class="line">    document.getElementById(&quot;app&quot;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>使用html-webpack-plugin对html打包。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D html-webpack-plugin html-loader</span><br></pre></td></tr></table></figure></li></ol><p>修改<code>webpack.config.js</code>配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&apos;path&apos;);</span><br><span class="line">const HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">module: &#123;</span><br><span class="line">rules: [</span><br><span class="line">&#123;</span><br><span class="line">test: /\.jsx?$/,</span><br><span class="line">exclude: /node_modules/,</span><br><span class="line">use: [</span><br><span class="line">&#123;</span><br><span class="line">loader: &apos;babel-loader&apos;,</span><br><span class="line">options: &#123;</span><br><span class="line">presets:[&apos;@babel/preset-env&apos;, &apos;@babel/preset-react&apos;]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;,&#123;</span><br><span class="line">test: /\.html$/,</span><br><span class="line">use: [</span><br><span class="line">&#123;</span><br><span class="line">loader: &quot;html-loader&quot;,</span><br><span class="line">options: &#123; minimize: true &#125;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line">plugins: [</span><br><span class="line">new HtmlWebpackPlugin(&#123;</span><br><span class="line">template: &apos;./public/index.html&apos;,</span><br><span class="line">filename: &apos;index.html&apos;,</span><br><span class="line">&#125;)</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol start="5"><li>安装<code>webpack-dev-server</code>插件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D webpack-dev-server</span><br></pre></td></tr></table></figure></li></ol><p>修改package.json文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">&quot;start&quot;: &quot;webpack-dev-server --mode development --open&quot;,</span><br><span class="line">&quot;build&quot;: &quot;webpack --mode production&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>修改webpack.config.js文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&apos;path&apos;);</span><br><span class="line">const HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">mode: &quot;development&quot;, </span><br><span class="line">entry: &apos;./src/index.js&apos;, </span><br><span class="line">output: &#123;</span><br><span class="line">path: path.resolve(__dirname, &apos;build&apos;),</span><br><span class="line">filename: &apos;index.js&apos;,</span><br><span class="line">&#125;,</span><br><span class="line">module: &#123;</span><br><span class="line">rules: [</span><br><span class="line">&#123;</span><br><span class="line">test: /\.jsx?$/,</span><br><span class="line">exclude: /node_modules/,</span><br><span class="line">use: [</span><br><span class="line">&#123;</span><br><span class="line">loader: &apos;babel-loader&apos;,</span><br><span class="line">options: &#123;</span><br><span class="line">presets:[&apos;@babel/preset-env&apos;, &apos;@babel/preset-react&apos;],</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;,&#123;</span><br><span class="line">test: /\.html$/,</span><br><span class="line">use: [</span><br><span class="line">&#123;</span><br><span class="line">loader: &quot;html-loader&quot;,</span><br><span class="line">options: &#123; minimize: true &#125;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line">plugins: [</span><br><span class="line">new HtmlWebpackPlugin(&#123;</span><br><span class="line">template: &apos;./public/index.html&apos;,</span><br><span class="line">filename: &apos;index.html&apos;,</span><br><span class="line">&#125;)</span><br><span class="line">],</span><br><span class="line">devServer:&#123;</span><br><span class="line">contentBase:path.join(__dirname,&quot;dist&quot;),</span><br><span class="line">compress:true,</span><br><span class="line">port:8888,</span><br><span class="line">host:&apos;127.0.0.1&apos;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol start="6"><li>安装<code>react-hot-loader</code>插件（可选）<blockquote><p>webpack中提供了热模块更新的功能，在不刷新整个页面的情况下来替换某些更变的组件，而这样做的最大的好处就在于状态的保存。比如我们前面在输入框中输入的内容，就不会在我们热模块替换以后被刷新掉，让我们要重新再输入一次了。</p></blockquote></li></ol><p>安装插件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D react-hot-loader</span><br></pre></td></tr></table></figure></p><p>修改<code>webpack.config.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&apos;path&apos;);</span><br><span class="line">const HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">mode: &quot;development&quot;, </span><br><span class="line">entry: &apos;./src/index.js&apos;, </span><br><span class="line">output: &#123;</span><br><span class="line">path: path.resolve(__dirname, &apos;build&apos;),</span><br><span class="line">filename: &apos;index.js&apos;,</span><br><span class="line">&#125;,</span><br><span class="line">module: &#123;</span><br><span class="line">rules: [</span><br><span class="line">&#123;</span><br><span class="line">test: /\.jsx?$/,</span><br><span class="line">exclude: /node_modules/,</span><br><span class="line">use: [</span><br><span class="line">&#123;</span><br><span class="line">loader: &apos;babel-loader&apos;,</span><br><span class="line">options: &#123;</span><br><span class="line">presets:[&apos;@babel/preset-env&apos;, &apos;@babel/preset-react&apos;],</span><br><span class="line">plugins: [&apos;react-hot-loader/babel&apos;],</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;,&#123;</span><br><span class="line">test: /\.html$/,</span><br><span class="line">use: [</span><br><span class="line">&#123;</span><br><span class="line">loader: &quot;html-loader&quot;,</span><br><span class="line">options: &#123; minimize: true &#125;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line">plugins: [</span><br><span class="line">new HtmlWebpackPlugin(&#123;</span><br><span class="line">template: &apos;./public/index.html&apos;,</span><br><span class="line">filename: &apos;index.html&apos;,</span><br><span class="line">&#125;)</span><br><span class="line">],</span><br><span class="line">devServer:&#123;</span><br><span class="line">contentBase:path.join(__dirname,&quot;dist&quot;),</span><br><span class="line">compress:true,</span><br><span class="line">port:8888,</span><br><span class="line">host:&apos;127.0.0.1&apos;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>修改<code>./index.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import React from &apos;react&apos;;</span><br><span class="line">import ReactDom from &apos;react-dom&apos;;</span><br><span class="line">import &#123; AppContainer &#125; from &apos;react-hot-loader&apos;</span><br><span class="line">import App from &apos;./app&apos;;</span><br><span class="line"></span><br><span class="line">const render = Component =&gt; &#123;  </span><br><span class="line">ReactDom.render(</span><br><span class="line">&lt;AppContainer&gt;</span><br><span class="line">&lt;Component /&gt;</span><br><span class="line">&lt;/AppContainer&gt;,</span><br><span class="line">document.getElementById(&apos;root&apos;)</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render(App);</span><br><span class="line"></span><br><span class="line">if (module.hot) &#123;</span><br><span class="line">module.hot.accept(&apos;./app&apos;, () =&gt; &#123; render(App) &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>修改package.json，加入<code>--hot</code>参数启动<code>react-hot-loader</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">&quot;start&quot;: &quot;webpack-dev-server --hot --mode development --open&quot;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用nrm来管理npm的源</title>
      <link href="2018/11/17/nrm/"/>
      <url>2018/11/17/nrm/</url>
      
        <content type="html"><![CDATA[<p>在日常中，存在很多需要切换npm源的情况，通过nrm可以方便的切换npm的源。</p><a id="more"></a><h2 id="nrm使用"><a href="#nrm使用" class="headerlink" title="nrm使用"></a>nrm使用</h2><ol><li><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install -g nrm</span><br></pre></td></tr></table></figure></li><li><p>查看nrm命令或者帮助文档</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nrm -h</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Usage: nrm [options] [<span class="built_in">command</span>]</span><br><span class="line"> Commands:</span><br><span class="line">   ls                           List all the registries</span><br><span class="line">   current                      Show current registry name</span><br><span class="line">   use &lt;registry&gt;               Change registry to registry</span><br><span class="line">   add &lt;registry&gt; &lt;url&gt; [home]  Add one custom registry</span><br><span class="line">   del &lt;registry&gt;               Delete one custom registry</span><br><span class="line">   home &lt;registry&gt; [browser]    Open the homepage of registry with optional browser</span><br><span class="line">   <span class="built_in">test</span> [registry]              Show response time <span class="keyword">for</span> specific or all registries</span><br><span class="line">   <span class="built_in">help</span>                         Print this <span class="built_in">help</span></span><br><span class="line"> Options:</span><br><span class="line">   -h, --<span class="built_in">help</span>     output usage information</span><br><span class="line">   -V, --version  output the version number</span><br></pre></td></tr></table></figure><ol start="3"><li>常用命令<br><code>nrm ls</code> 查看已有的源<br><code>nrm add &lt;源名称&gt; &lt;源地址&gt;</code> 新增源<br><code>nrm use &lt;源名称&gt;</code> 切换源</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo简单使用配置</title>
      <link href="2018/08/03/hexo%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E9%85%8D%E7%BD%AE/"/>
      <url>2018/08/03/hexo%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p><code>next</code>主题非常的火爆，<br>(<code>next</code>主题文档)[<a href="http://theme-next.iissnan.com/third-party-services.html]" target="_blank" rel="noopener">http://theme-next.iissnan.com/third-party-services.html]</a></p><p>如果部署Github Page,每次部署的时候，都需要重新设置<code>domain</code>，这时候只需要新建一个<code>CNAME</code>文件，将重定向的<code>url</code>写入，并将这个文件放在<code>theme</code>内的<code>source</code>文件夹内即可</p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
